import { FormatMask } from './FormatMask';

// Fun√ß√£o original modificada
const formatSerializedId = (serializedId) => {
  if (!serializedId) return null;
  
  const formatMask = new FormatMask();
  const number = serializedId.replace('@c.us', '');

  return formatMask.setPhoneFormatMask(number)?.replace('+55', 'üáßüá∑');
};

// Fun√ß√£o para verificar se o n√∫mero est√° em um formato que pode ser tratado
const canFormatNumber = (number) => {
  if (!number) return false;
  
  // Remove qualquer parte de ID do WhatsApp (como @c.us)
  const cleanNumber = typeof number === 'string' ? number.replace('@c.us', '') : String(number);
  
  // Verifica se √© um n√∫mero v√°lido para formata√ß√£o (n√∫meros brasileiros come√ßam com 55)
  // Aceita formatos como 5511987654321, 55(11)987654321, etc.
  return /^(55|\+55)?\d{10,11}$/.test(cleanNumber.replace(/[^\d+]/g, ''));
};

// Fun√ß√£o aprimorada para formatar n√∫meros com seguran√ßa
const safeFormatPhoneNumber = (number, hideNumber = false, isGroup = false) => {
  // Se for um grupo ou n√£o tiver n√∫mero, retorna o valor original
  if (isGroup || !number) return number;
  
  try {
    // Tenta formatar o n√∫mero usando a fun√ß√£o original
    const formattedNumber = formatSerializedId(number);
    
    // Se conseguiu formatar e deve esconder parte do n√∫mero
    if (formattedNumber && hideNumber) {
      // Verifica se j√° est√° no formato com bandeira e parentheses
      if (formattedNumber.includes('üáßüá∑')) {
        // Localiza a parte num√©rica para ocultar
        const parts = formattedNumber.match(/üáßüá∑\s*\((\d{2})\)\s*(\d+)-(\d+)/);
        if (parts && parts.length >= 4) {
          const [, ddd, parte1, parte2] = parts;
          return `üáßüá∑ (${ddd}) ${parte1.slice(0, -2)}**-**${parte2.slice(-2)}`;
        }
      }
      
      // Fallback para oculta√ß√£o b√°sica
      return formattedNumber.slice(0, -6) + "**-**" + number.slice(-2);
    }
    
    // Se conseguiu formatar, retorna o n√∫mero formatado
    if (formattedNumber) return formattedNumber;
    
    // Se n√£o conseguiu formatar mas o n√∫mero pode ser formatado
    if (canFormatNumber(number)) {
      // Tenta limpar e formatar manualmente
      const cleanNumber = number.replace(/\D/g, '');
      const formatMask = new FormatMask();
      const manualFormatted = formatMask.setPhoneFormatMask(cleanNumber)?.replace('+55', 'üáßüá∑');
      
      if (manualFormatted && hideNumber) {
        const parts = manualFormatted.match(/üáßüá∑\s*\((\d{2})\)\s*(\d+)-(\d+)/);
        if (parts && parts.length >= 4) {
          const [, ddd, parte1, parte2] = parts;
          return `üáßüá∑ (${ddd}) ${parte1.slice(0, -2)}**-**${parte2.slice(-2)}`;
        }
        return manualFormatted.slice(0, -6) + "**-**" + cleanNumber.slice(-2);
      }
      
      return manualFormatted || number;
    }
    
    // Para n√∫meros que n√£o podem ser formatados mas precisam ser ocultados
    if (hideNumber && typeof number === 'string' && number.length > 8) {
      return number.slice(0, -6) + "**-**" + number.slice(-2);
    }
    
    // √öltimo caso: retorna o n√∫mero original
    return number;
  } catch (error) {
    console.error("Erro ao formatar n√∫mero:", error);
    return number;
  }
};

export { formatSerializedId, safeFormatPhoneNumber };
export default formatSerializedId;